#!/usr/bin/perl -w
package main;

# Copyright 1999-2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
#

# modules to use - these will need to be marked as
# dependencies, and installable by portage
use strict;
use File::Spec;
use File::Path;
use File::Basename;
use File::Copy;
use Term::ANSIColor;
use Cwd qw(getcwd abs_path cwd);
use YAML;
use YAML::Node;
use Carp;
use IO::File;

# While Writing - TO REMOVE - MPC
use lib "../lib/";
use Gentoo;
use Gentoo::UI::Console;

use constant PATH_PKG_VAR => '/var/db/pkg/';


##### Establish our tmpdir
unless ($ENV{TMPDIR}) { $ENV{TMPDIR} = '/var/tmp/g-cpan' }

my $VERSION = "0.14.0";
my $prog    = basename($0);

my %dep_list  = ();
my @perl_dirs = ("dev-perl", "perl-core", "perl-gcpan", "perl-text", "perl-tools", "perl-xml", "perl-dev");

###############################
# Command line interpretation #
###############################

# Module load & configure
use Getopt::Long;
Getopt::Long::Configure("bundling");

# Init all options (has to be done to perform the 'sum test' later)
my ($debug, $verbose, $search, $install, $upgrade, $generate, $list, $pretend, $ask, $cpan_reload ) = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

# Set colors here so we can use them at will anywhere :)
my $green = color("bold green");
my $white = color("bold white");
my $cyan  = color("bold cyan");
my $reset = color("reset");

#Get & Parse them
GetOptions(
    'verbose|v'  => \$verbose,
    'search|s'   => \$search,
    'install|i'  => \$install,
    'upgrade|u'  => \$upgrade,
    'list|l'     => \$list,
    'pretend|p'  => \$pretend,
    'ask|a'      => \$ask,
    'generate|g' => \$generate,
    'debug|d'    => \$debug,
    'cpan_reload' => \$cpan_reload,
    'help|h'     => sub { exit_usage(); }
  )
  or exit_usage();

# Output error if more than one switch is activated
#
if ($search + $list + $install + $generate + $upgrade + $ask > 1)
{
    print_err($prog,"You can't combine actions with each other.\n");
    print_out("${white}Please consult ${cyan}$prog ${green}--help${reset} or ${cyan}man $prog${reset} for more information\n\n");
    exit();
}

if ($search + $list + $install + $generate + $upgrade + $pretend + $ask == 0)
{
    print_err($prog,"You haven't told $prog what to do.\n");
    print_out("${white}Please consult ${cyan}$prog ${green}--help${reset} or ${cyan}man $prog${reset} for more information\n\n");

    exit();
}

# Output error if no arguments
if ((scalar(@ARGV) == 0) and !(defined($upgrade) or defined($list)))
{
    print_err($prog,"Not even one module name or expression given!\n");
    print_out("${white}Please consult ${cyan}$prog ${green}--help${reset} for more information\n\n");
    exit();
}



######################
# CPAN Special Stuff #
######################

my $GentooCPAN = Gentoo->new();

# Don't do autointalls via ExtUtils::AutoInstall
$ENV{PERL_EXTUTILS_AUTOINSTALL} = "--skipdeps";
$ENV{PERL_MM_USE_DEFAULT}=1;

# Do we need to generate a config ?
eval 'use CPAN::Config;';
my $needs_cpan_stub = $@ ? 1 : 0;

# Test Replacement - ((A&B)or(C&B)) should be the same as ((A or C) and B)
if (   (($needs_cpan_stub) || ($> > 0))
    && (!-f "$ENV{HOME}/.cpan/CPAN/MyConfig.pm"))
{

    # In case match comes from the UID test
    $needs_cpan_stub = 1;
    
    print_warn("No CPAN Config found, auto-generating a basic one");

    # Generate a fake config for CPAN
    $GentooCPAN->makeCPANstub();
}
else
{
    $needs_cpan_stub = 0;
}

use CPAN;

##########
# main() #
##########

# Taking care of Searches. This has to be improved a lot, since it uses a call to
# CPAN Shell to do the job, thus making it impossible to have a clean output..
if ($search)
{
    foreach my $expr (@ARGV)
    {

        # Assume they gave us module-name instead of module::name
        # which is bad, because CPAN can't convert it ;p

        print_ok($prog,"Searching for $expr on CPAN");
        unless (CPAN::Shell->i("/$expr/"))
        {
            $expr =~ s/-/::/g;
            CPAN::Shell->i("/$expr/");
        }
    }

    exit;
}

# Confirm that there is an /etc/portage/categories file
# and that we have an entry for perl-gcpan in it.
my $cat_file = "/etc/portage/categories";
if (-f "$cat_file")
{

    #
    #  Use braces to localize the $/ assignment, so we don't get bitten later.
    #
    local $/ = undef;
    my $cat_read = IO::File->new($cat_file,'<');
    if (defined $cat_read)
    {
        my $data = <$cat_read>;
        undef $cat_read;
        autoflush STDOUT 1;
        unless (grep "gcpan", $data)
        {
            my $cat_write = IO::File->new($cat_file,'>>');
            if (defined $cat_write)
            {
                print $cat_write "perl-gcpan";
                undef $cat_write;
                autoflush STDOUT 1;
            }
            else
            {
                print_err("Insufficient permissions to edit /etc/portage/categories");
                print_err("Please run $prog as a user with sufficient permissions");
                exit;
            }
        }
    }

}
else
{
    my $cat_write = IO::File->new($cat_file,'>');
    if (defined $cat_write)
    {
        print $cat_write "perl-gcpan";
    }
    else
    {
        print_err("Insufficient permissions to edit /etc/portage/categories");
        print_err("Please run $prog as a user with sufficient permissions");
        exit;
    }
}

my $gcpan_run = Gentoo->new(
   'cpan_reload' => $cpan_reload,
   'DEBUG'       => $debug,
   );
$gcpan_run->{'portage_bases'}{$gcpan_run->getValue("PORTDIR")} = 1;
my $overlay = $gcpan_run->getValue("PORTDIR_OVERLAY")||undef;
$gcpan_run->{'sources'} = $gcpan_run->getValue("DISTDIR");

my $test_overlay = IO::File->new($gcpan_run->{'sources'} 
        . "/test-gpcan", ">");
if ( print $test_overlay "1" ) 
{
    undef $test_overlay;
    unlink($gcpan_run->{'sources'} . "/test-gcpan");
}
else
{
    undef $test_overlay;
    $gcpan_run->{'sources'} = -d $ENV{TMPDIR} ? defined($ENV{TMPDIR}) :
        $ENV{"HOME"} . "/.cpan/sources";
}


if ($overlay)
{
    if ($overlay =~ m/\b\s.*/)
    {
	    my @overlays = map { split ' ' } $overlay;
    	foreach (@overlays) 
    	{
    		$gcpan_run->{'portage_bases'}{$_} = 1;
    	}
	
    }
    else
    {
    	$gcpan_run->{'portage_bases'}{$overlay} = 1;
    }
}
elsif ($generate or $pretend)
{
    print_err($prog,"The option you have chosen isn't supported without a configured overlay.\n");
    exit();
}

# Set portage_categories to our defined list of perl_dirs
$gcpan_run->{portage_categories} = \@perl_dirs;

for $_ (@ARGV) 
{
    my $module = $_;
    generatePackageInfo($module);
    
}




sub generatePackageInfo {
    # Since all we are concerned with is the final name of the package, this
    # should be a safe substitution
    my $ebuild_wanted = shift;
    # Grab specific info for this module
    $gcpan_run->getCPANInfo($ebuild_wanted);
    # If we found something on cpan, transform the portage_name
    # It's possible to not find something on cpan at this point - we're just
    # trying to pre-seed the portage_name
    if ($gcpan_run->{'cpan'}{lc($ebuild_wanted)})
    { 
        $gcpan_run->{'cpan'}{lc($ebuild_wanted)}{'portage_name'} =
            $gcpan_run->transformCPANname($gcpan_run->{'cpan'}{lc($ebuild_wanted)}{'src_uri'});
    }
    
    # Save a copy of the originally requested name for later use
    my $original_ebuild = $ebuild_wanted;
    # Simple transform of name to something portage friendly
    $ebuild_wanted =~ s{::}{-}xms;
    # Scan portage for the ebuild name
    &scanTree($ebuild_wanted);
	unless($gcpan_run->{'ebuilds'}{'found_ebuild'}{lc($ebuild_wanted)}) 
	{
        
        # Ebuild wasn't found - scan for the nice version of the module name
        my $portage_name =
            $gcpan_run->{'cpan'}{lc($original_ebuild)}{'portage_name'};
        next if (lc($original_ebuild) eq "perl");
        &scanTree($gcpan_run->{'cpan'}{lc($original_ebuild)}{'portage_name'});
        
        # We had success in finding this module under a different name
        if
        ($gcpan_run->{'ebuilds'}{'found_ebuild'}{lc($gcpan_run->{'cpan'}{lc($original_ebuild)}{'portage_name'})})
        {
            print_info($prog,"Found ebuild under CPAN name (".
                $gcpan_run->{'cpan'}{lc($original_ebuild)}{'portage_name'} . ")");
            $ebuild_wanted =
                $gcpan_run->{'cpan'}{lc($original_ebuild)}{'portage_name'};
        }
    }
    else
    {
    $gcpan_run->{'cpan'}{lc($original_ebuild)}{'portage_name'} =
        $ebuild_wanted;
    }

    # Second round - we've looked for the package in portage two different 
    # ways now, time to get serious and create it ourselves
	unless($gcpan_run->{'ebuilds'}{'found_ebuild'}{lc($ebuild_wanted)}) 
    {
        # Generate info - nothing found currently in the tree
        $gcpan_run->debug;
        next if (lc($gcpan_run->{'cpan'}{lc($original_ebuild)}{'portage_name'}) eq "perl");
        print STDERR "Was called for $ebuild_wanted vs. $original_ebuild\n";
        if ($gcpan_run->{'cpan'}{lc($original_ebuild)}{'name'})
        {
            print_info($prog,"Generating ebuild for " . $gcpan_run->{'cpan'}{lc($original_ebuild)}{'name'});

        # We have a cpan package that matches the request. 
        # Let's unpack it and get all the deps out of it.
        $gcpan_run->unpackModule($gcpan_run->{'cpan'}{lc($original_ebuild)}{'name'});

        foreach my $dep (keys
            %{$gcpan_run->{'cpan'}{lc($original_ebuild)}{'depends'}} )
            {
                next unless (defined $dep && $dep ne '' );
                next if ($dep eq "perl");
                # Make sure we have information relevant to each of the deps
                generatePackageInfo($dep);
            # Reindex one last time for anything we build after the fact
            scanTree($gcpan_run->{'cpan'}{lc($dep)}{'portage_name'});
            }
        
      # Write ebuild here?
    $gcpan_run->debug;
    my @overlays = map { split ' ' } $overlay;
    foreach my $target_dir (@overlays)
    {
        if ( -d $target_dir )
        {
            my $gcpan_dir = File::Spec->catdir($target_dir, "perl-gcpan");
            unless ( -d $gcpan_dir )
            {
                print_info($prog,"Create directory '$gcpan_dir'");# if $verbose;
                mkdir($gcpan_dir, 0755) or fatal($Gentoo::ERR_FOLDER_CREATE, $gcpan_dir, $!);
            }
            my $ebuild_dir = File::Spec->catdir($gcpan_dir,
            $gcpan_run->{'cpan'}{lc($original_ebuild)}{'portage_name'});
            unless (-d $ebuild_dir )
            {
                print_info($prog,"Create directory '$ebuild_dir'");# if $verbose;
                mkdir($ebuild_dir, 0755) or fatal($Gentoo::ERR_FOLDER_CREATE,
                $ebuild_dir, $!);
            }
            my $files_dir = File::Spec->catdir($ebuild_dir,'files');
            unless (-d $files_dir )
            {
                print_info($prog,"Create directory '$files_dir'");# if $verbose;
                mkdir($files_dir, 0755) or fatal($Gentoo::ERR_FOLDER_CREATE,
                $files_dir, $!);
            }
            my $ebuild=
            File::Spec->catdir($ebuild_dir,$gcpan_run->{'cpan'}{lc($original_ebuild)}{'portage_name'}."-".$gcpan_run->{'cpan'}{lc($original_ebuild)}{'version'}. ".ebuild");
                open EBUILD, ">$ebuild" or fatal($Gentoo::ERR_OPEN_WRITE, $ebuild, $!);
    print EBUILD <<"HERE";
# Copyright 1999-2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# This ebuild generated by $prog $VERSION

inherit perl-module

S=\${WORKDIR}/$gcpan_run->{'cpan'}{lc($original_ebuild)}{'portage_sdir'}

DESCRIPTION="$gcpan_run->{'cpan'}{lc($original_ebuild)}{'description'}"
HOMEPAGE="http://search.cpan.org/search?query=\${PN}"
SRC_URI="mirror://cpan/authors/id/$gcpan_run->{'cpan'}{lc($original_ebuild)}{'src_uri'}"


IUSE=""

SLOT="0"
LICENSE="|| ( Artistic GPL-2 )"
KEYWORDS=""

DEPEND="
HERE
foreach my $dep (keys
            %{$gcpan_run->{'cpan'}{lc($original_ebuild)}{'depends'}} )
            {
            next unless (defined $dep && $dep ne '');
            next if ($dep eq "perl");
            my $portage_name =
                lc($gcpan_run->{'cpan'}{lc($dep)}{'portage_name'});
            print EBUILD $gcpan_run->{ebuilds}{portage}{$portage_name}{'category'}
            . "/" .
            $gcpan_run->{ebuilds}{portage}{lc($portage_name)}{'name'} . "\n";

            }
            print EBUILD "\"\n";
            close EBUILD;
        }
    }


    #
    # Steps to follow at this point:
    # 0.4 Unpack archive - DONE
    # 1. Download tarball  - DONE
    # 2. Unpack and perl Makefile.PL -DONE
    # 3. $gcpan_run->findDeps -DONE
    # 4. Write ebuild;
    # 5. Verify deps
    # 5.1 Verify Deps exis in portage
    # 5.1.1 Verify Deps exist in cpan

        }
  	}
    else
    {
        print_ok($prog,"Ebuild already exists for $ebuild_wanted");
    }
    
        # open $FH-portage_name?, ">someebuild";
        #print "\n\n";
        #print "NAME: " . $module_info{'portage_name'} . "-" . $module_info{'version'} . "\n";
        #print "SRC_URI: mirror://cpan/authors/id/" . $module_info{'src_uri'} . "\n";
        #print "DESCRIPTION: " . $module_info{'description'} . "\n";
        #print "DEPS: ";
 #$gcpan_run->debug;
# Loop through the supplied module names

}
sub scanTree
{
    my $module = shift;
    return unless ($module);
    	foreach my $portage_root (keys %{$gcpan_run->{'portage_bases'}} ) 
    	{
    		if ( -d $portage_root) 
    		{
                print_ok($prog,"Scanning $portage_root for $module");
    			$gcpan_run->getAvailableVersions($portage_root,$module);
    		}
            # Pop out of the loop if we've found the module
	    	last if ($gcpan_run->{'ebuilds'}{'found_ebuild'}{lc($module)});
	    }
}


sub generateEbuild
{
    my $module = shift;
    $gcpan_run->getCPANPackages($module);
    unless ($gcpan_run->{'ebuilds'}{'found_module'}{lc($module)})
    {
        print_err("$prog","Unable to coerce this ebuild out of cpan.");
    }
    # We should have enough information stored away in gcpan_run now to be
    # able to generate an ebuild now. The only item we're missing is the
    # dependency information, so let's grab that now :)
    print "NAME: " . lc($module) . "\n";
    print "DESCRIPTION: " . $gcpan_run->{'cpan'}{lc($module)}{'description'}
    . "\n";
    print "SRC_URI: " . $gcpan_run->{'cpan'}{lc($module)}{'src_uri'} ."\n";

}


# cab - Takes care of system's sanity
END {

    #Clean out the /tmp tree we were using
    #I know this looks weird, but since clean_up is invoked on a search, where OVERLAYS isn't ever defined,
    # we first need to see if it exists, then need to remove only if it has content (the old exists vs. defined)
    
    if (defined($ENV{TMPDIR}) )
    {
        print_info("Cleaning temporary overlay\n") if $verbose;
        #rmtree( ["$tmp_overlay_dir"] );
    }
}



# cab - nice help message ! ;)
sub exit_usage {
    print <<"USAGE";
${white}Usage : ${cyan}$prog ${green}<Switch(es)> ${cyan}Module Name(s)${reset}

${green}--ask,-a${reset}
    Ask before installing

${green}--generate,-g${reset}
    Generate ebuilds only (Requires working overlays)

${green}--install,-i${reset}
    Try to generate ebuild for the given module name
    and, if successful, emerge it. Important : installation
    requires exact CPAN Module Name.

${green}--list,-l${reset}
    This command generates a list of the Perl modules and ebuilds
    handled by $prog.

${green}--pretend,-p${reset}
    Pretend (show actions, but don't emerge). This still generates
    new ebuilds.

${green}--search,-s${reset}
    Search CPAN for the given expression (similar to
    the "m /EXPR/" from the CPAN Shell). Searches are
    case insensitive.

${green}--upgrade,-u${reset}
    Try to list and upgrade all Perl modules managed by $prog.
    It generate up-to-date ebuilds, then emerge then.

${green}--verbose,-v${reset}
    Enable (some) verbose output.

${green}--cpan_reload${reset}
    Reload the CPAN index

USAGE

    exit;
}


exit;

##############

=pod  



=head1 Name

g-cpan 
- install CPAN-provided Perl modules using Gentoo's Portage 


=head1 Synopsis

B<g-cpan> [B<-a>| B<--ask>]  [B<-g>| B<--generate>]  [B<-i>| B<--install>]  [B<-l>| B<--list >]  [B<-p>| B<--pretend >] [B<-s>| B<--search>] [B<-u>| B<--upgrade >] [B<-v>| B<--verbose>]  <I<module-name>> 

=head1 Description

B<g-cpan> is a perl script
that installs a CPAN module (including its dependencies) using Gentoo's
Portage.  It saves dependency information and  stored files as if they were installed through a regular ebuild.  

=head1 CPAN Configuration

B<~/.cpan/CPAN/MyConfig.pm>
B</path/to/perl/CPAN/Config.pm> 

When you run B<g-cpan>, it will check for two configuration files. If you are root, it will check for the presense of an already configured CPAN under your perl install path. If CPAN is not configured, or you are not root, g-cpan will create a generic configuration for CPAN in ~/.cpan/CPAN/ called MyConfig.pm. You can modify this file as needed at any time. 

The CPAN configuration file is used for interacting with CPAN, determining what modules are available, what modules are needed, and performing all basic CPAN functions. 

=head1 g-cpan and Overlays

B<g-cpan> is now overlay "friendly." B<g-cpan> will scan both the overlays provided in your make.conf as well as any you have set via environment variables, to help determine its course of action. If you have  defined overlays, B<g-cpan> will use the first overlay in your list that the user running it can write to. Any ebuilds generated by B<g-cpan> will be stored in this overlay for future use (such as upgrading). 

If no overlays are defined, or the user operating B<g-cpan> cannot write to an overlay, then anything generated will be written to a temporary space and wiped on exit. 

=head1 Arguments

=over 4

=item B<-a,--ask>

Pass the "ask" argument to portage. This will cause portage to prompt you to confirm your installation prior to issuing an emerge 

=item B<-g,--generate>

Generate ebuilds and drop them in the overlay, but never call portage. Useful for generating a tree of ebuilds without having permissions to portage. 

=item B<-i,--install>

Install the (list of) modules provided. 

=item B<-l,--list>

List ebuilds that have been generated by g-cpan and reside in your overlay. 

=item B<-p,--pretend>

Create ebuilds as needed for the (list of) modules provided, but don't perform the actual emerge. 

=item B<-s,--search>

Search CPAN for the provided module. 

=item B<--cpan_reload>

Reload CPAN's index online

=item B<-u,--upgrade>

Attempt to upgrade any ebuilds generated by g-cpan to newer versions. This option will create new ebuilds for those that exist in your overlay already. If a module name is given, it will attempt to only upgrade the requested module. If no arguments are given, all modules in your g-cpan overlay will be checked. 

=item B<-v,--verbose>

Enable verbose mode for more feedback on the step by step processes that g-cpan is running 

=back

=head1 Usage


=head2 Here we install Jabber::RPC

# g-cpan -i Jabber::RPC 

=head2 Performing a search

# g-cpan -s Clone::Any 

=head2 Upgrading overlay from g-cpan

# g-cpan -u 

=head2 Upgrading specifc ebuild in overlay from g-cpan

# g-cpan -u Mickey-Mouse 

=head1 Todo

Todo 

=head1 See Also

L<B<emerge>(1)>, L<B<ebuild>(5)>, L<B<make.conf>(5)>, L<B<perl>(1)> 

=head1 Authors

mcummings <mcummings@gentoo.org> cab <cab@dragou.net> sniper <sniper@mongueurs.net> beu <beu@gentoo.org> J Robert Ray <jrray@gentoo.org> (g-cpan) RAC <rac@gentoo.org>  Sven Vermeulen <swift@gentoo.org> (Original manpage) 

=head1 Reporting Bugs 

Please report bugs via http://bugs.gentoo.org/ or https://bugs.gentoo.org/ 

=head1 cvs Header $Header: $ 

=cut

