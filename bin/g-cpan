#!/usr/bin/perl -w
package main;
# Copyright 1999-2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
#

# modules to use - these will need to be marked as
# dependencies, and installable by portage
use strict;
use File::Spec;
use File::Path;
use File::Basename;
use File::Copy;
use Term::ANSIColor;
use Cwd qw(getcwd abs_path cwd);
use YAML;
use YAML::Node;
# While Writing - TO REMOVE - MPC
use lib "../lib/";
use Gentoo;
use Gentoo::Config;

use constant PATH_PKG_VAR => '/var/db/pkg/';
##### CPAN CONFIG #####
use constant CPAN_CFG_DIR  => '.cpan/CPAN';
use constant CPAN_CFG_NAME => 'MyConfig.pm';

# defaults tools for CPAN Config
use constant DEF_FTP_PROG      => '/usr/bin/ftp';
use constant DEF_GPG_PROG      => '/usr/bin/gpg';
use constant DEF_GZIP_PROG     => '/bin/gzip';
use constant DEF_LYNX_PROG     => '/usr/bin/lynx';
use constant DEF_MAKE_PROG     => '/usr/bin/make';
use constant DEF_NCFTPGET_PROG => '/usr/bin/ncftpget';
use constant DEF_LESS_PROG     => '/usr/bin/less';
use constant DEF_TAR_PROG      => '/bin/tar';
use constant DEF_UNZIP_PROG    => '/usr/bin/unzip';
use constant DEF_WGET_PROG     => '/usr/bin/wget';
use constant DEF_BASH_PROG     => '/bin/bash';


#MPC
my $DEBUG;
my $modules;
##### ERRORS constants (easy internationalisation ;-) #####
use constant ERR_FILE_NOTFOUND   => "Couldn't find file '%s'";      # filename
use constant ERR_FOLDER_NOTFOUND => "Couldn't find folder '%s'";    # foldername
use constant ERR_OPEN_READ       =>
  "Couldn't open (read) file '%s' : %s";    # filename, $!
use constant ERR_OPEN_WRITE =>
  "Couldn't open (write) file '%s' : %s";    # filename, $!
use constant ERR_FOLDER_OPEN =>
  "Couldn't open folder '%s', %s";           # foldername, $!
use constant ERR_FOLDER_CREATE =>
  "Couldn't create folder '%s' : %s";        # foldername, $!

my $VERSION = "0.14.0";
my $prog    = basename($0);

my %dep_list  = ();
my @perl_dirs = (
    "dev-perl",   "perl-core", "perl-gcpan", "perl-text",
    "perl-tools", "perl-xml",  "perl-dev"
);

###############################
# Command line interpretation #
###############################

# Module load & configure
use Getopt::Long;
Getopt::Long::Configure("bundling");

# Init all options (has to be done to perform the 'sum test' later)
my ( $verbose, $search, $install, $upgrade, $generate, $list, $pretend, $ask ) =
  ( 0, 0, 0, 0, 0, 0, 0, 0 );

# Set colors here so we can use them at will anywhere :)
my $green = color("bold green");
my $white = color("bold white");
my $cyan  = color("bold cyan");
my $reset = color("reset");

#Get & Parse them
GetOptions(
    'verbose|v'  => \$verbose,
    'search|s'   => \$search,
    'install|i'  => \$install,
    'upgrade|u'  => \$upgrade,
    'list|l'     => \$list,
    'pretend|p'  => \$pretend,
    'ask|a'      => \$ask,
    'generate|g' => \$generate,
    'help|h'     => sub { exit_usage(); }
  )
  or exit_usage();

# Output error if more than one switch is activated
#
if ( $search + $list + $install + $generate + $upgrade + $ask > 1 ) {
    print_err("You can't combine actions with each other.\n");
    print
"${white}Please consult ${cyan}$prog ${green}--help${reset} or ${cyan}man $prog${reset} for more information\n\n";
    exit();
}

if ( $search + $list + $install + $generate + $upgrade + $pretend + $ask == 0 )
{
    print_err("You haven't told $prog what to do.\n");
    print
"${white}Please consult ${cyan}$prog ${green}--help${reset} or ${cyan}man $prog${reset} for more information\n\n";

    exit();
}

# Output error if no arguments
if ( ( scalar(@ARGV) == 0 ) and !( defined($upgrade) or defined($list) ) ) {
    print_err("Not even one module name or expression given !\n");
    print
"${white}Please consult ${cyan}$prog ${green}--help${reset} for more information\n\n";
    exit();
}

######################
# CPAN Special Stuff #
######################

# Don't do autointalls via ExtUtils::AutoInstall
$ENV{PERL_EXTUTILS_AUTOINSTALL} = "--skipdeps";


# Do we need to generate a config ?
eval 'use CPAN::Config;';
my $needs_cpan_stub = $@ ? 1 : 0;

# Test Replacement - ((A&B)or(C&B)) should be the same as ((A or C) and B)
if (   ( ($needs_cpan_stub) || ( $> > 0 ) )
    && ( !-f "$ENV{HOME}/.cpan/CPAN/MyConfig.pm" ) )
{

    # In case match comes from the UID test
    $needs_cpan_stub = 1;

    # Generate a fake config for CPAN
    cpan_stub();
}
else {
    $needs_cpan_stub = 0;
}

use CPAN;

##########
# main() #
##########

# Taking care of Searches. This has to be improved a lot, since it uses a call to
# CPAN Shell to do the job, thus making it impossible to have a clean output..
if ($search) {
    foreach my $expr (@ARGV) {

        # Assume they gave us module-name instead of module::name
        # which is bad, because CPAN can't convert it ;p

        print_ok("Searching for $expr on CPAN");
        unless ( CPAN::Shell->i("/$expr/") ) {
            $expr =~ s/-/::/g;
            CPAN::Shell->i("/$expr/");
        }
    }

    clean_up();
    exit;
}

# Confirm that there is an /etc/portage/categories file
# and that we have an entry for perl-gcpan in it.
my $cat_file = "/etc/portage/categories";
if ( -f "$cat_file" ) {

    #
    #  Use braces to localize the $/ assignment, so we don't get bitten later.
    #
    my $data;
    local $/ = undef;
    open( FH, "/etc/portage/categories" ) || die;
    $data = <FH>;
    close FH;
    unless ( grep "gcpan", $data ) {

        if ( open( CATEG, ">/etc/portage/categories" ) ) {
            print CATEG "perl-gcpan";
            close(CATEG);
        }
        else {
            print_err(
                "Insufficient permissions to edit /etc/portage/categories");
            print_err("Please run $prog as a user with sufficient permissions");
            exit;
        }
    }

}
else {
    if ( open( CATEG, ">/etc/portage/categories" ) ) {
        print CATEG "perl-gcpan";
        close(CATEG);
    }
    else {
        print_err("Insufficient permissions to edit /etc/portage/categories");
        print_err("Please run $prog as a user with sufficient permissions");
        exit;
    }
}

# Set our temporary overlay directory for the scope of this run.
# By setting an overlay directory, we bypass the predefined portage
# directory and allow portage to build a package outside of its
# normal tree.
my $tmp_overlay_dir;

my @ebuild_list;    #this array needs to be seriously observed.

# Set up global paths
my $PORTAGE_DIR     = getPortdir();
my $PORTAGE_DISTDIR = getPortDist();
my @OVERLAYS        = getOverlay();

unless ( scalar(@OVERLAYS) > 0 ) {
    if ( $generate or $pretend ) {
        print_err(
"The option you have chosen isn't supported without a configured overlay.\n"
        );
        exit();
    }
    unless ( $ENV{TMPDIR} ) { $ENV{TMPDIR} = '/var/tmp/g-cpan' }
    $tmp_overlay_dir = "$ENV{TMPDIR}/perl-modules_$$";

    # Create the tmp_overlay_dir in the even that it is a 'real' temp dir
    if ( not -d $tmp_overlay_dir ) {
        mkpath( $tmp_overlay_dir, 1, 0755 )
          or fatal( ERR_FOLDER_CREATE, $tmp_overlay_dir, $! );
    }
    push @OVERLAYS, $tmp_overlay_dir;
}

# o_reset will be used to catch if went through all of the overlay dirs successfully -
# open to better ways :) mcummings
my $o_reset = 1;

foreach my $o_dir (@OVERLAYS) {

    # See if we can create a file
    next if ( $o_dir =~ m/^$/ );
    if ( open( TMP, ">$o_dir/g-cpan-test" ) ) {
        close(TMP);
        unlink("$o_dir/g-cpan-test");
        $tmp_overlay_dir = $o_dir;
        $o_reset         = 0;
        if ($verbose) {
            print_info(
"Setting $tmp_overlay_dir as the PORTDIR_OVERLAY for this session."
            );
        }
        last;
    }
}
if ( $o_reset > 0 ) {
    print_err(
        "You don't have permission to work in any of the portage overlays.");
    print_err("Please run $prog as a user with sufficient permissions.\n");
    exit();
}

my @OVERLAY_PERLS;
my @PORTAGE_DEV_PERL;
my @TMP_DEV_PERL_DIRS;

foreach my $pdir (@perl_dirs) {
    my $tmp_dir = File::Spec->catdir( $PORTAGE_DIR, $pdir );
    push @PORTAGE_DEV_PERL, $tmp_dir;
    foreach my $odir (@OVERLAYS) {
        my $otmp = File::Spec->catdir( $odir, $pdir );
        push @OVERLAY_PERLS, $otmp;
    }
    my $vtmp_dir = File::Spec->catdir( PATH_PKG_VAR, $pdir );
    push @TMP_DEV_PERL_DIRS, $vtmp_dir;
}

# Create the ebuild in PORTDIR_OVERLAY, if it is defined and exists
# Part of this is to find an overlay the user running this session can actually write to

# Grab the whole available arches list, to include them later in ebuilds
print_info("Grabbing arch list") if $verbose;
my $arches = do {
    open my $tmp, "<$PORTAGE_DIR/profiles/arch.list"
      or fatal( ERR_OPEN_READ, "$PORTAGE_DIR/profiles/arch.list", $! );
    join " ", map { chomp; $_ } <$tmp>;
};

# Now we cat our dev-perl directory onto our overlay directory.
# This is done so that portage records the appropriate path
#i.e. dev-perl/package
my $perldev_overlay = File::Spec->catfile( $tmp_overlay_dir, 'perl-gcpan' );
if ( not -d $perldev_overlay ) {

    # create perldev overlay dir if not present
    mkpath( $perldev_overlay, 1, 0755 )
      or fatal( ERR_FOLDER_CREATE, $perldev_overlay, $! );
}

# Now we export our overlay directory into the session's env vars
$ENV{PORTDIR_OVERLAY} = $tmp_overlay_dir;

# Take care of List requests. This should return all the ebuilds managed by g-cpan
if ($list) {
    print_ok("Generating list of modules managed by g-cpan");
    my @managed = get_gcpans();
    exit();
}

if ($generate) {
    install_module($_) for (@ARGV);
}

if ($install) {
    install_module($_) for (@ARGV);
    emerge_module();
}

if ($upgrade) {
    if (@ARGV) {
        upgrade_module($_) for (@ARGV);
        emerge_module($_);
    }
    else {
        my @GLIST = get_gcpans();
        upgrade_module($_) for (@GLIST);
        emerge_module(@GLIST);
    }
}

clean_up();

exit;

##############



=pod  



=head1 Name

g-cpan 
- install CPAN-provided Perl modules using Gentoo's Portage 


=head1 Synopsis

B<g-cpan> [B<-a>| B<--ask>]  [B<-g>| B<--generate>]  [B<-i>| B<--install>]  [B<-l>| B<--list >]  [B<-p>| B<--pretend >] [B<-s>| B<--search>] [B<-u>| B<--upgrade >] [B<-v>| B<--verbose>]  <I<module-name>> 

=head1 Description

B<g-cpan> is a perl script
that installs a CPAN module (including its dependencies) using Gentoo's
Portage.  It saves dependency information and  stored files as if they were installed through a regular ebuild.  

=head1 CPAN Configuration

B<~/.cpan/CPAN/MyConfig.pm>
B</path/to/perl/CPAN/Config.pm> 

When you run B<g-cpan>, it will check for two configuration files. If you are root, it will check for the presense of an already configured CPAN under your perl install path. If CPAN is not configured, or you are not root, g-cpan will create a generic configuration for CPAN in ~/.cpan/CPAN/ called MyConfig.pm. You can modify this file as needed at any time. 

The CPAN configuration file is used for interacting with CPAN, determining what modules are available, what modules are needed, and performing all basic CPAN functions. 

=head1 g-cpan and Overlays

B<g-cpan> is now overlay "friendly." B<g-cpan> will scan both the overlays provided in your make.conf as well as any you have set via environment variables, to help determine its course of action. If you have  defined overlays, B<g-cpan> will use the first overlay in your list that the user running it can write to. Any ebuilds generated by B<g-cpan> will be stored in this overlay for future use (such as upgrading). 

If no overlays are defined, or the user operating B<g-cpan> cannot write to an overlay, then anything generated will be written to a temporary space and wiped on exit. 

=head1 Arguments

=over 4

=item B<-a,--ask>

Pass the "ask" argument to portage. This will cause portage to prompt you to confirm your installation prior to issuing an emerge 

=item B<-g,--generate>

Generate ebuilds and drop them in the overlay, but never call portage. Useful for generating a tree of ebuilds without having permissions to portage. 

=item B<-i,--install>

Install the (list of) modules provided. 

=item B<-l,--list>

List ebuilds that have been generated by g-cpan and reside in your overlay. 

=item B<-p,--pretend>

Create ebuilds as needed for the (list of) modules provided, but don't perform the actual emerge. 

=item B<-s,--search>

Search CPAN for the provided module. 

=item B<-u,--upgrade>

Attempt to upgrade any ebuilds generated by g-cpan to newer versions. This option will create new ebuilds for those that exist in your overlay already. If a module name is given, it will attempt to only upgrade the requested module. If no arguments are given, all modules in your g-cpan overlay will be checked. 

=item B<-v,--verbose>

Enable verbose mode for more feedback on the step by step processes that g-cpan is running 

=back

=head1 Usage


=head2 Here we install Jabber::RPC

# g-cpan -i Jabber::RPC 

=head2 Performing a search

# g-cpan -s Clone::Any 

=head2 Upgrading overlay from g-cpan

# g-cpan -u 

=head2 Upgrading specifc ebuild in overlay from g-cpan

# g-cpan -u Mickey-Mouse 

=head1 Todo

Todo 

=head1 See Also

L<B<emerge>(1)>, L<B<ebuild>(5)>, L<B<make.conf>(5)>, L<B<perl>(1)> 

=head1 Authors

mcummings <mcummings@gentoo.org> cab <cab@dragou.net> sniper <sniper@mongueurs.net> beu <beu@gentoo.org> J Robert Ray <jrray@gentoo.org> (g-cpan) RAC <rac@gentoo.org>  Sven Vermeulen <swift@gentoo.org> (Original manpage) 

=head1 Reporting Bugs 

Please report bugs via http://bugs.gentoo.org/ or https://bugs.gentoo.org/ 

=head1 cvs Header $Header: $ 

=cut
